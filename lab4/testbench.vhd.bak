
LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.NUMERIC_STD.ALL;

ENTITY elevator_ctrl_tb IS
END ENTITY;

ARCHITECTURE tb OF elevator_ctrl_tb IS
    CONSTANT NUM_FLOORS : INTEGER := 10;
    CONSTANT CLK_PERIOD : TIME := 20 ns; -- 50 MHz
    
    SIGNAL clk : STD_LOGIC := '0';
    SIGNAL reset : STD_LOGIC := '1';
    SIGNAL req : STD_LOGIC_VECTOR(NUM_FLOORS-1 DOWNTO 0) := (OTHERS => '0');
    SIGNAL floor : UNSIGNED(3 DOWNTO 0);
    SIGNAL door_open : STD_LOGIC;
    SIGNAL moving_up : STD_LOGIC;
    SIGNAL moving_down : STD_LOGIC;
    
    COMPONENT elevator IS
        PORT (
            clk : IN STD_LOGIC;
            reset : IN STD_LOGIC;
            req : IN STD_LOGIC_VECTOR(NUM_FLOORS-1 DOWNTO 0);
            floor : OUT UNSIGNED(3 DOWNTO 0);
            door_open : OUT STD_LOGIC;
            moving_up : OUT STD_LOGIC;
            moving_down : OUT STD_LOGIC
        );
    END COMPONENT;
    
    -- Clock generation
    PROCEDURE clk_gen(signal clk : OUT STD_LOGIC; constant FREQ : INTEGER) IS
        CONSTANT PERIOD : TIME := 1 sec / FREQ;
    BEGIN
        LOOP
            clk <= '1';
            WAIT FOR PERIOD/2;
            clk <= '0';
            WAIT FOR PERIOD/2;
        END LOOP;
    END PROCEDURE;
    
BEGIN

    UUT: elevator
        PORT MAP (
            clk => clk,
            reset => reset,
            req => req,
            floor => floor,
            door_open => door_open,
            moving_up => moving_up,
            moving_down => moving_down
        );

    -- Clock generation (50 MHz)
    clk_gen(clk, 50000000);

    -- Test process
    stimulus: PROCESS
        PROCEDURE assert_floor(expected_floor : INTEGER; msg : STRING) IS
        BEGIN
            WAIT UNTIL door_open = '1';
            ASSERT to_integer(floor) = expected_floor
                REPORT "Test Failed: " & msg & " - Expected floor: " & 
                       INTEGER'IMAGE(expected_floor) & " Got: " & 
                       INTEGER'IMAGE(to_integer(floor))
                SEVERITY ERROR;
            REPORT "PASS: " & msg & " - Reached floor " & INTEGER'IMAGE(expected_floor);
            WAIT FOR 3 sec; -- Wait for door to close
        END PROCEDURE;
        
        PROCEDURE wait_movement(direction : STRING) IS
        BEGIN
            IF direction = "UP" THEN
                WAIT UNTIL moving_up = '1';
            ELSE
                WAIT UNTIL moving_down = '1';
            END IF;
            REPORT "Elevator started moving " & direction;
        END PROCEDURE;
        
    BEGIN
        -- Initial reset
        reset <= '1';
        WAIT FOR 100 ns;
        reset <= '0';
        WAIT FOR 100 ns;
        
        REPORT "Starting Elevator Controller Testbench";
        
        -- Test 1: Single request to floor 3
        REPORT "=== Test 1: Single request to floor 3 ===";
        req <= "0000001000"; -- Floor 3
        assert_floor(3, "Single request to floor 3");
        
        -- Test 2: Multiple simultaneous requests (priority test)
        REPORT "=== Test 2: Multiple simultaneous requests (1, 5, 7) ===";
        req <= "0010100010"; -- Floors 1, 5, 7 (from current floor 3)
        
        -- Should go to floor 5 first (nearest above)
        assert_floor(5, "First stop at floor 5");
        
        -- Should go to floor 7 next (continuing up)
        assert_floor(7, "Second stop at floor 7");
        
        -- Should go to floor 1 last (direction change)
        assert_floor(1, "Third stop at floor 1");
        
        -- Test 3: New request while moving up
        REPORT "=== Test 3: New request while moving ===";
        req <= "0001000000"; -- Floor 6
        wait_movement("UP");
        
        -- Add higher request while moving
        WAIT FOR 1 sec;
        req <= "0100000000"; -- Floor 8
        
        -- Should complete to floor 8 first
        assert_floor(8, "Completed to highest request first");
        
        -- Then go to floor 6
        assert_floor(6, "Then to intermediate request");
        
        -- Test 4: Down direction with multiple requests
        REPORT "=== Test 4: Down direction with multiple requests ===";
        req <= "0000010101"; -- Floors 0, 2, 4 (from current floor 6)
        
        -- Should go to floor 4 first (nearest below)
        assert_floor(4, "First down stop at floor 4");
        
        -- Should go to floor 2 next
        assert_floor(2, "Second down stop at floor 2");
        
        -- Should go to floor 0 last
        assert_floor(0, "Final down stop at floor 0");
        
        -- Test 5: Request for current floor
        REPORT "=== Test 5: Request for current floor ===";
        req <= "0000000001"; -- Floor 0 (current floor)
        assert_floor(0, "Door opens at current floor");
        
        -- Test 6: Complex scenario - mixed requests
        REPORT "=== Test 6: Complex mixed requests ===";
        req <= "0101000010"; -- Floors 1, 6, 8 (from floor 0)
        
        -- Should go up to floor 1, 6, 8 in order
        assert_floor(1, "Complex: First stop floor 1");
        assert_floor(6, "Complex: Second stop floor 6"); 
        assert_floor(8, "Complex: Third stop floor 8");
        
        -- Add new lower request while at top
        req <= "0000001000"; -- Floor 3
        assert_floor(3, "Complex: Final stop floor 3");
        
        REPORT "=== ALL TESTS COMPLETED SUCCESSFULLY ===";
        WAIT;
    END PROCESS;

    -- Monitor process for debugging
    monitor: PROCESS
    BEGIN
        WAIT UNTIL rising_edge(clk);
        IF door_open = '1' THEN
            REPORT "Door opened at floor: " & INTEGER'IMAGE(to_integer(floor)) 
                   & " at time: " & TIME'IMAGE(NOW);
        END IF;
        IF moving_up = '1' THEN
            REPORT "Elevator moving UP at time: " & TIME'IMAGE(NOW);
        END IF;
        IF moving_down = '1' THEN
            REPORT "Elevator moving DOWN at time: " & TIME'IMAGE(NOW);
        END IF;
    END PROCESS;

END ARCHITECTURE tb;